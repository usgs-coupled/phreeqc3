name: CMake

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  # build:
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       os: [macos-latest, ubuntu-latest, windows-latest]

  #   # The CMake configure and build commands are platform agnostic and should work equally
  #   # well on Windows or Mac.  You can convert this to a matrix build if you need
  #   # cross-platform coverage.
  #   # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
  #   runs-on: ${{ matrix.os }}

  #   steps:
  #   - uses: actions/checkout@v3

  #   - name: Configure
  #     # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
  #     # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
  #     run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

  #   - name: Build
  #     # Build your program with the given configuration
  #     run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

  test:
    strategy:
      fail-fast: false
      matrix:
        # os: [macos-latest, ubuntu-latest, windows-latest]
        os: [windows-2019, windows-2022]

    ##needs: [build]
    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v3

    - name: Install ninja numdiff valgrind (Linux)
      if: runner.os == 'Linux'
      run: sudo apt-get install -y ninja-build numdiff valgrind

    - name: Install ninja numdiff (macOS)
      if: runner.os == 'macOS'
      run: brew install ninja numdiff

    - name: Set up Visual Studio shell
      if: runner.os == 'Windows'
      uses: egor-tensin/vs-shell@v2
      with:
        arch: x64

    - name: CTest
      run: ctest -S ctest.cmake -V --output-on-failure

    - name: Debug windows-2019
      if: ${{ always() && matrix.os == 'windows-2019' }}
      run: |
        cd _ctest
        dumpbin /IMPORTS phreeqcd.exe
        Get-Command KERNEL32.dll
        Get-Command MSVCP140D.dll
        Get-Command VCRUNTIME140D.dll
        Get-Command VCRUNTIME140_1D.dll
        Get-Command ucrtbased.dll

    - name: Debug windows-2022
      if: ${{ always() && matrix.os == 'windows-2022' }}
      run: |
        cd _ctest
        dumpbin /IMPORTS phreeqcd.exe
        Get-Command KERNEL32.dll
        Get-Command MSVCP140D.dll
        Get-Command VCRUNTIME140D.dll
        Get-Command VCRUNTIME140_1D.dll
        Get-Command ucrtbased.dll

    - name: Upload results
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.os }}-results
        path: ${{ github.workspace }}/_ctest/Testing/
